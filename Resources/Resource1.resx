<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddListItem_Description" xml:space="preserve">
    <value>Adds a new item to a list by modifying it</value>
  </data>
  <data name="AddListItem_DisplayName" xml:space="preserve">
    <value>Add List Item</value>
  </data>
  <data name="AddListItem_Property_InputList" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="AddListItem_Property_Item" xml:space="preserve">
    <value>Item</value>
  </data>
  <data name="AdjustDateActivity_Description" xml:space="preserve">
    <value>Adjusts an input date with basic operations like adding a number of days</value>
  </data>
  <data name="AdjustDateActivity_DisplayName" xml:space="preserve">
    <value>Adjust Date</value>
  </data>
  <data name="AdjustDateActivity_Property_AdjustedDate" xml:space="preserve">
    <value>Adjusted date</value>
  </data>
  <data name="AdjustDateActivity_Property_AdjustMethod" xml:space="preserve">
    <value>Adjust method</value>
  </data>
  <data name="AdjustDateActivity_Property_InputDate" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="AdjustDateActivity_Property_Unit" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="AdjustDateActivity_Property_Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ExtractTextActivity_Description" xml:space="preserve">
    <value>Extracts part of a text that is surrounded by some known text</value>
  </data>
  <data name="ExtractTextActivity_DisplayName" xml:space="preserve">
    <value>Extract Text</value>
  </data>
  <data name="ExtractText_Property_InputText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="ExtractText_Property_LeftText" xml:space="preserve">
    <value>Text to the left</value>
  </data>
  <data name="ExtractText_Property_Result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="ExtractText_Property_RightText" xml:space="preserve">
    <value>Text to the right</value>
  </data>
  <data name="ExtractText_Property_UseRegex" xml:space="preserve">
    <value>Use regular expressions</value>
  </data>
  <data name="FormatDateActivity_Description" xml:space="preserve">
    <value>Formats a date as a text using a certain pattern</value>
  </data>
  <data name="FormatDateActivity_DisplayName" xml:space="preserve">
    <value>Format Date</value>
  </data>
  <data name="FormatDate_Property_Custom" xml:space="preserve">
    <value>Custom format</value>
  </data>
  <data name="FormatDate_Property_CustomTooltip" xml:space="preserve">
    <value>2022-03-02 16:08:01

yyyy - 2022
M - 3
MM - 03
MMM - Mar
d - 2
dd - 02
HH - 16
H - 4
mm - 08
m - 8
ss - 01
s - 1
tt - PM
t - P</value>
  </data>
  <data name="FormatDate_Property_Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="FormatDate_Property_Format" xml:space="preserve">
    <value>Format</value>
  </data>
  <data name="FormatDate_Property_Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="FormatNumber_Description" xml:space="preserve">
    <value>Formats a number as a text displaying a certain number of digits and custom decimals and thousands separators</value>
  </data>
  <data name="FormatNumber_DisplayName" xml:space="preserve">
    <value>Format Number</value>
  </data>
  <data name="FormatNumber_Property_Decimals" xml:space="preserve">
    <value>Decimals</value>
  </data>
  <data name="FormatNumber_Property_DecimalSeparator" xml:space="preserve">
    <value>Decimal separator</value>
  </data>
  <data name="FormatNumber_Property_Number" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="FormatNumber_Property_Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="FormatNumber_Property_ThousandSeparator" xml:space="preserve">
    <value>Thousands separator</value>
  </data>
  <data name="GenerateRandomNumber_Description" xml:space="preserve">
    <value>Generates a random number between From and To</value>
  </data>
  <data name="GenerateRandomNumber_DisplayName" xml:space="preserve">
    <value>Generate Random Number</value>
  </data>
  <data name="GenerateRandomNumber_Property_From" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="GenerateRandomNumber_Property_RandomNumber" xml:space="preserve">
    <value>Random Number</value>
  </data>
  <data name="GenerateRandomNumber_Property_To" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="GetDateFromTextActivity_Description" xml:space="preserve">
    <value>Transforms a given text to a date type</value>
  </data>
  <data name="GetDateFromTextActivity_DisplayName" xml:space="preserve">
    <value>Get Date From Text</value>
  </data>
  <data name="GetDateFromText_Property_Culture" xml:space="preserve">
    <value>Culture</value>
  </data>
  <data name="GetDateFromText_Property_InputText" xml:space="preserve">
    <value>Date (Text)</value>
  </data>
  <data name="GetDateFromText_Property_OutDate" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="GetNumberFromTextActivity_Description" xml:space="preserve">
    <value>Transforms a text into a number</value>
  </data>
  <data name="GetNumberFromTextActivity_DisplayName" xml:space="preserve">
    <value>Get Number From Text</value>
  </data>
  <data name="GetNumberFromText_Property_InputText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="GetNumberFromText_Property_Number" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="GetNumberFromText_Property_Separator" xml:space="preserve">
    <value>Decimal separator</value>
  </data>
  <data name="GetTimeBetweenDatesActivity_Description" xml:space="preserve">
    <value>Gets the time between two dates in seconds/minutes/etc</value>
  </data>
  <data name="GetTimeBetweenDatesActivity_DisplayName" xml:space="preserve">
    <value>Get Time Between Dates</value>
  </data>
  <data name="GetTimeBetweenDatesActivity_Property_EndDate" xml:space="preserve">
    <value>End date</value>
  </data>
  <data name="GetTimeBetweenDatesActivity_Property_Interval" xml:space="preserve">
    <value>Interval</value>
  </data>
  <data name="GetTimeBetweenDatesActivity_Property_StartDate" xml:space="preserve">
    <value>Start date</value>
  </data>
  <data name="GetTimeBetweenDatesActivity_Property_Time" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="GetTimeBetweenDatesActivity_Property_Unit" xml:space="preserve">
    <value>Unit</value>
  </data>
  <data name="RoundNumberActivity_Description" xml:space="preserve">
    <value>Rounds an input number to a specific number of digits</value>
  </data>
  <data name="RoundNumberActivity_DisplayName" xml:space="preserve">
    <value>Round Number</value>
  </data>
  <data name="RoundNumber_Property_Decimals" xml:space="preserve">
    <value>Decimals</value>
  </data>
  <data name="RoundNumber_Property_InputNumber" xml:space="preserve">
    <value>Number</value>
  </data>
  <data name="RoundNumber_Property_Result" xml:space="preserve">
    <value>Result</value>
  </data>
  <data name="SearchAndReplaceInTextActivity_Description" xml:space="preserve">
    <value>Replaces a given search text with another text in the input text. The activity can also be used with regular expressions (regex)</value>
  </data>
  <data name="SearchAndReplaceInTextActivity_DisplayName" xml:space="preserve">
    <value>Search And Replace In Text</value>
  </data>
  <data name="SearchAndReplaceInText_Property_InputText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="SearchAndReplaceInText_Property_Replace" xml:space="preserve">
    <value>Replace with</value>
  </data>
  <data name="SearchAndReplaceInText_Property_Result" xml:space="preserve">
    <value>Resulted text</value>
  </data>
  <data name="SearchAndReplaceInText_Property_Search" xml:space="preserve">
    <value>Search for</value>
  </data>
  <data name="SearchAndReplaceInText_Property_UseRegex" xml:space="preserve">
    <value>Use regular expressions</value>
  </data>
  <data name="TextLengthActivity_Description" xml:space="preserve">
    <value>Returns the length, in characters, of the input text</value>
  </data>
  <data name="TextLengthActivity_DisplayName" xml:space="preserve">
    <value>Text Length</value>
  </data>
  <data name="TextLength_Property_InputText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TextLength_Property_Length" xml:space="preserve">
    <value>Length</value>
  </data>
  <data name="TextToLowercaseActivity_Description" xml:space="preserve">
    <value>Converts the input text to lowercase</value>
  </data>
  <data name="TextToLowercaseActivity_DisplayName" xml:space="preserve">
    <value>Text To lowercase</value>
  </data>
  <data name="TextToLowercase_Property_InputText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TextToLowercase_Property_LowercaseText" xml:space="preserve">
    <value>Lowercase text</value>
  </data>
  <data name="TextToUppercaseActivity_Description" xml:space="preserve">
    <value>Converts the input text to UPPERCASE</value>
  </data>
  <data name="TextToUppercaseActivity_DisplayName" xml:space="preserve">
    <value>Text To UPPERCASE</value>
  </data>
  <data name="TextToUppercase_Property_InputText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TextToUppercase_Property_UppercaseText" xml:space="preserve">
    <value>UPPERCASE text</value>
  </data>
  <data name="TrimTextActivity_Description" xml:space="preserve">
    <value>Removes leading and trailing white-space characters from the input text</value>
  </data>
  <data name="TrimTextActivity_DisplayName" xml:space="preserve">
    <value>Trim Text</value>
  </data>
  <data name="TrimText_Property_Direction" xml:space="preserve">
    <value>Remove</value>
  </data>
  <data name="TrimText_Property_InputText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="TrimText_Property_TrimmedText" xml:space="preserve">
    <value>Trimmed text</value>
  </data>
</root>